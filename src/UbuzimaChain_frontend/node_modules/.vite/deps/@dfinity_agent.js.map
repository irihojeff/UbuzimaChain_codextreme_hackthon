{
  "version": 3,
  "sources": ["../../@dfinity/agent/src/actor.ts", "../../@dfinity/agent/src/agent/api.ts", "../../@dfinity/agent/src/auth.ts", "../../@dfinity/agent/src/agent/http/transforms.ts", "../../@dfinity/agent/src/utils/random.ts", "../../@dfinity/agent/src/agent/http/types.ts", "../../@dfinity/agent/src/agent/http/errors.ts", "../../@dfinity/agent/src/utils/expirableMap.ts", "../../@dfinity/agent/src/der.ts", "../../@dfinity/agent/src/public_key.ts", "../../@dfinity/agent/src/agent/http/index.ts", "../../@dfinity/agent/src/agent/proxy.ts", "../../@dfinity/agent/src/agent/index.ts", "../../@dfinity/agent/src/polling/index.ts", "../../@dfinity/agent/src/polling/strategy.ts", "../../@dfinity/agent/src/canisters/management_idl.ts", "../../@dfinity/agent/src/canisters/asset_idl.ts", "../../@dfinity/agent/src/canisters/asset.ts", "../../@dfinity/agent/src/fetch_candid.ts"],
  "sourcesContent": ["import { Buffer } from 'buffer/';\nimport {\n  Agent,\n  getDefaultAgent,\n  HttpDetailsResponse,\n  QueryResponseRejected,\n  QueryResponseStatus,\n  ReplicaRejectCode,\n  SubmitResponse,\n} from './agent';\nimport { AgentError } from './errors';\nimport { IDL } from '@dfinity/candid';\nimport { pollForResponse, PollStrategyFactory, strategy } from './polling';\nimport { Principal } from '@dfinity/principal';\nimport { RequestId } from './request_id';\nimport { toHex } from './utils/buffer';\nimport { CreateCertificateOptions } from './certificate';\nimport managementCanisterIdl from './canisters/management_idl';\nimport _SERVICE from './canisters/management_service';\n\nexport class ActorCallError extends AgentError {\n  constructor(\n    public readonly canisterId: Principal,\n    public readonly methodName: string,\n    public readonly type: 'query' | 'update',\n    public readonly props: Record<string, string>,\n  ) {\n    super(\n      [\n        `Call failed:`,\n        `  Canister: ${canisterId.toText()}`,\n        `  Method: ${methodName} (${type})`,\n        ...Object.getOwnPropertyNames(props).map(n => `  \"${n}\": ${JSON.stringify(props[n])}`),\n      ].join('\\n'),\n    );\n  }\n}\n\nexport class QueryCallRejectedError extends ActorCallError {\n  constructor(\n    canisterId: Principal,\n    methodName: string,\n    public readonly result: QueryResponseRejected,\n  ) {\n    super(canisterId, methodName, 'query', {\n      Status: result.status,\n      Code: ReplicaRejectCode[result.reject_code] ?? `Unknown Code \"${result.reject_code}\"`,\n      Message: result.reject_message,\n    });\n  }\n}\n\nexport class UpdateCallRejectedError extends ActorCallError {\n  constructor(\n    canisterId: Principal,\n    methodName: string,\n    public readonly requestId: RequestId,\n    public readonly response: SubmitResponse['response'],\n  ) {\n    super(canisterId, methodName, 'update', {\n      'Request ID': toHex(requestId),\n      ...(response.body\n        ? {\n            ...(response.body.error_code\n              ? {\n                  'Error code': response.body.error_code,\n                }\n              : {}),\n            'Reject code': String(response.body.reject_code),\n            'Reject message': response.body.reject_message,\n          }\n        : {\n            'HTTP status code': response.status.toString(),\n            'HTTP status text': response.statusText,\n          }),\n    });\n  }\n}\n\n/**\n * Configuration to make calls to the Replica.\n */\nexport interface CallConfig {\n  /**\n   * An agent to use in this call, otherwise the actor or call will try to discover the\n   * agent to use.\n   */\n  agent?: Agent;\n\n  /**\n   * A polling strategy factory that dictates how much and often we should poll the\n   * read_state endpoint to get the result of an update call.\n   */\n  pollingStrategyFactory?: PollStrategyFactory;\n\n  /**\n   * The canister ID of this Actor.\n   */\n  canisterId?: string | Principal;\n\n  /**\n   * The effective canister ID. This should almost always be ignored.\n   */\n  effectiveCanisterId?: Principal;\n}\n\n/**\n * Configuration that can be passed to customize the Actor behaviour.\n */\nexport interface ActorConfig extends CallConfig {\n  /**\n   * The Canister ID of this Actor. This is required for an Actor.\n   */\n  canisterId: string | Principal;\n\n  /**\n   * An override function for update calls' CallConfig. This will be called on every calls.\n   */\n  callTransform?(\n    methodName: string,\n    args: unknown[],\n    callConfig: CallConfig,\n  ): Partial<CallConfig> | void;\n\n  /**\n   * An override function for query calls' CallConfig. This will be called on every query.\n   */\n  queryTransform?(\n    methodName: string,\n    args: unknown[],\n    callConfig: CallConfig,\n  ): Partial<CallConfig> | void;\n\n  /**\n   * Polyfill for BLS Certificate verification in case wasm is not supported\n   */\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n}\n\n// TODO: move this to proper typing when Candid support TypeScript.\n/**\n * A subclass of an actor. Actor class itself is meant to be a based class.\n */\nexport type ActorSubclass<T = Record<string, ActorMethod>> = Actor & T;\n\n/**\n * An actor method type, defined for each methods of the actor service.\n */\nexport interface ActorMethod<Args extends unknown[] = unknown[], Ret = unknown> {\n  (...args: Args): Promise<Ret>;\n  withOptions(options: CallConfig): (...args: Args) => Promise<Ret>;\n}\n\n/**\n * An actor method type, defined for each methods of the actor service.\n */\nexport interface ActorMethodWithHttpDetails<Args extends unknown[] = unknown[], Ret = unknown>\n  extends ActorMethod {\n  (...args: Args): Promise<{ httpDetails: HttpDetailsResponse; result: Ret }>;\n}\n\nexport type FunctionWithArgsAndReturn<Args extends unknown[] = unknown[], Ret = unknown> = (\n  ...args: Args\n) => Ret;\n\n// Update all entries of T with the extra information from ActorMethodWithInfo\nexport type ActorMethodMappedWithHttpDetails<T> = {\n  [K in keyof T]: T[K] extends FunctionWithArgsAndReturn<infer Args, infer Ret>\n    ? ActorMethodWithHttpDetails<Args, Ret>\n    : never;\n};\n\n/**\n * The mode used when installing a canister.\n */\nexport enum CanisterInstallMode {\n  Install = 'install',\n  Reinstall = 'reinstall',\n  Upgrade = 'upgrade',\n}\n\n/**\n * Internal metadata for actors. It's an enhanced version of ActorConfig with\n * some fields marked as required (as they are defaulted) and canisterId as\n * a Principal type.\n */\ninterface ActorMetadata {\n  service: IDL.ServiceClass;\n  agent?: Agent;\n  config: ActorConfig;\n}\n\nconst metadataSymbol = Symbol.for('ic-agent-metadata');\n\nexport interface CreateActorClassOpts {\n  httpDetails?: boolean;\n}\n\n/**\n * An actor base class. An actor is an object containing only functions that will\n * return a promise. These functions are derived from the IDL definition.\n */\nexport class Actor {\n  /**\n   * Get the Agent class this Actor would call, or undefined if the Actor would use\n   * the default agent (global.ic.agent).\n   * @param actor The actor to get the agent of.\n   */\n  public static agentOf(actor: Actor): Agent | undefined {\n    return actor[metadataSymbol].config.agent;\n  }\n\n  /**\n   * Get the interface of an actor, in the form of an instance of a Service.\n   * @param actor The actor to get the interface of.\n   */\n  public static interfaceOf(actor: Actor): IDL.ServiceClass {\n    return actor[metadataSymbol].service;\n  }\n\n  public static canisterIdOf(actor: Actor): Principal {\n    return Principal.from(actor[metadataSymbol].config.canisterId);\n  }\n\n  public static async install(\n    fields: {\n      module: ArrayBuffer;\n      mode?: CanisterInstallMode;\n      arg?: ArrayBuffer;\n    },\n    config: ActorConfig,\n  ): Promise<void> {\n    const mode = fields.mode === undefined ? CanisterInstallMode.Install : fields.mode;\n    // Need to transform the arg into a number array.\n    const arg = fields.arg ? [...new Uint8Array(fields.arg)] : [];\n    // Same for module.\n    const wasmModule = [...new Uint8Array(fields.module)];\n    const canisterId =\n      typeof config.canisterId === 'string'\n        ? Principal.fromText(config.canisterId)\n        : config.canisterId;\n\n    await getManagementCanister(config).install_code({\n      mode: { [mode]: null } as any,\n      arg,\n      wasm_module: wasmModule,\n      canister_id: canisterId,\n    });\n  }\n\n  public static async createCanister(config?: CallConfig): Promise<Principal> {\n    const { canister_id: canisterId } = await getManagementCanister(\n      config || {},\n    ).provisional_create_canister_with_cycles({ amount: [], settings: [] });\n\n    return canisterId;\n  }\n\n  public static async createAndInstallCanister(\n    interfaceFactory: IDL.InterfaceFactory,\n    fields: {\n      module: ArrayBuffer;\n      arg?: ArrayBuffer;\n    },\n    config?: CallConfig,\n  ): Promise<ActorSubclass> {\n    const canisterId = await this.createCanister(config);\n    await this.install(\n      {\n        ...fields,\n      },\n      { ...config, canisterId },\n    );\n\n    return this.createActor(interfaceFactory, { ...config, canisterId });\n  }\n\n  public static createActorClass(\n    interfaceFactory: IDL.InterfaceFactory,\n    options?: CreateActorClassOpts,\n  ): ActorConstructor {\n    const service = interfaceFactory({ IDL });\n\n    class CanisterActor extends Actor {\n      [x: string]: ActorMethod;\n\n      constructor(config: ActorConfig) {\n        if (!config.canisterId)\n          throw new AgentError(\n            `Canister ID is required, but received ${typeof config.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`,\n          );\n        const canisterId =\n          typeof config.canisterId === 'string'\n            ? Principal.fromText(config.canisterId)\n            : config.canisterId;\n\n        super({\n          config: {\n            ...DEFAULT_ACTOR_CONFIG,\n            ...config,\n            canisterId,\n          },\n          service,\n        });\n\n        for (const [methodName, func] of service._fields) {\n          if (options?.httpDetails) {\n            func.annotations.push(ACTOR_METHOD_WITH_HTTP_DETAILS);\n          }\n\n          this[methodName] = _createActorMethod(this, methodName, func, config.blsVerify);\n        }\n      }\n    }\n\n    return CanisterActor;\n  }\n\n  public static createActor<T = Record<string, ActorMethod>>(\n    interfaceFactory: IDL.InterfaceFactory,\n    configuration: ActorConfig,\n  ): ActorSubclass<T> {\n    if (!configuration.canisterId) {\n      throw new AgentError(\n        `Canister ID is required, but received ${typeof configuration.canisterId} instead. If you are using automatically generated declarations, this may be because your application is not setting the canister ID in process.env correctly.`,\n      );\n    }\n    return new (this.createActorClass(interfaceFactory))(\n      configuration,\n    ) as unknown as ActorSubclass<T>;\n  }\n\n  public static createActorWithHttpDetails<T = Record<string, ActorMethod>>(\n    interfaceFactory: IDL.InterfaceFactory,\n    configuration: ActorConfig,\n  ): ActorSubclass<ActorMethodMappedWithHttpDetails<T>> {\n    return new (this.createActorClass(interfaceFactory, { httpDetails: true }))(\n      configuration,\n    ) as unknown as ActorSubclass<ActorMethodMappedWithHttpDetails<T>>;\n  }\n\n  private [metadataSymbol]: ActorMetadata;\n\n  protected constructor(metadata: ActorMetadata) {\n    this[metadataSymbol] = Object.freeze(metadata);\n  }\n}\n\n// IDL functions can have multiple return values, so decoding always\n// produces an array. Ensure that functions with single or zero return\n// values behave as expected.\nfunction decodeReturnValue(types: IDL.Type[], msg: ArrayBuffer) {\n  const returnValues = IDL.decode(types, Buffer.from(msg));\n  switch (returnValues.length) {\n    case 0:\n      return undefined;\n    case 1:\n      return returnValues[0];\n    default:\n      return returnValues;\n  }\n}\n\nconst DEFAULT_ACTOR_CONFIG = {\n  pollingStrategyFactory: strategy.defaultStrategy,\n};\n\nexport type ActorConstructor = new (config: ActorConfig) => ActorSubclass;\n\nexport const ACTOR_METHOD_WITH_HTTP_DETAILS = 'http-details';\n\nfunction _createActorMethod(\n  actor: Actor,\n  methodName: string,\n  func: IDL.FuncClass,\n  blsVerify?: CreateCertificateOptions['blsVerify'],\n): ActorMethod {\n  let caller: (options: CallConfig, ...args: unknown[]) => Promise<unknown>;\n  if (func.annotations.includes('query') || func.annotations.includes('composite_query')) {\n    caller = async (options, ...args) => {\n      // First, if there's a config transformation, call it.\n      options = {\n        ...options,\n        ...actor[metadataSymbol].config.queryTransform?.(methodName, args, {\n          ...actor[metadataSymbol].config,\n          ...options,\n        }),\n      };\n\n      const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();\n      const cid = Principal.from(options.canisterId || actor[metadataSymbol].config.canisterId);\n      const arg = IDL.encode(func.argTypes, args);\n\n      const result = await agent.query(cid, { methodName, arg });\n\n      switch (result.status) {\n        case QueryResponseStatus.Rejected:\n          throw new QueryCallRejectedError(cid, methodName, result);\n\n        case QueryResponseStatus.Replied:\n          return func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS)\n            ? {\n                httpDetails: result.httpDetails,\n                result: decodeReturnValue(func.retTypes, result.reply.arg),\n              }\n            : decodeReturnValue(func.retTypes, result.reply.arg);\n      }\n    };\n  } else {\n    caller = async (options, ...args) => {\n      // First, if there's a config transformation, call it.\n      options = {\n        ...options,\n        ...actor[metadataSymbol].config.callTransform?.(methodName, args, {\n          ...actor[metadataSymbol].config,\n          ...options,\n        }),\n      };\n\n      const agent = options.agent || actor[metadataSymbol].config.agent || getDefaultAgent();\n      const { canisterId, effectiveCanisterId, pollingStrategyFactory } = {\n        ...DEFAULT_ACTOR_CONFIG,\n        ...actor[metadataSymbol].config,\n        ...options,\n      };\n      const cid = Principal.from(canisterId);\n      const ecid = effectiveCanisterId !== undefined ? Principal.from(effectiveCanisterId) : cid;\n      const arg = IDL.encode(func.argTypes, args);\n      const { requestId, response } = await agent.call(cid, {\n        methodName,\n        arg,\n        effectiveCanisterId: ecid,\n      });\n\n      if (!response.ok || response.body /* IC-1462 */) {\n        throw new UpdateCallRejectedError(cid, methodName, requestId, response);\n      }\n\n      const pollStrategy = pollingStrategyFactory();\n      const responseBytes = await pollForResponse(agent, ecid, requestId, pollStrategy, blsVerify);\n      const shouldIncludeHttpDetails = func.annotations.includes(ACTOR_METHOD_WITH_HTTP_DETAILS);\n\n      if (responseBytes !== undefined) {\n        return shouldIncludeHttpDetails\n          ? {\n              httpDetails: response,\n              result: decodeReturnValue(func.retTypes, responseBytes),\n            }\n          : decodeReturnValue(func.retTypes, responseBytes);\n      } else if (func.retTypes.length === 0) {\n        return shouldIncludeHttpDetails\n          ? {\n              httpDetails: response,\n              result: undefined,\n            }\n          : undefined;\n      } else {\n        throw new Error(`Call was returned undefined, but type [${func.retTypes.join(',')}].`);\n      }\n    };\n  }\n\n  const handler = (...args: unknown[]) => caller({}, ...args);\n  handler.withOptions =\n    (options: CallConfig) =>\n    (...args: unknown[]) =>\n      caller(options, ...args);\n  return handler as ActorMethod;\n}\n\nexport type ManagementCanisterRecord = _SERVICE;\n\n/**\n * Create a management canister actor\n * @param config\n */\nexport function getManagementCanister(config: CallConfig): ActorSubclass<ManagementCanisterRecord> {\n  function transform(_methodName: string, args: unknown[], _callConfig: CallConfig) {\n    const first = args[0] as any;\n    let effectiveCanisterId = Principal.fromHex('');\n    if (first && typeof first === 'object' && first.canister_id) {\n      effectiveCanisterId = Principal.from(first.canister_id as unknown);\n    }\n    return { effectiveCanisterId };\n  }\n\n  return Actor.createActor<ManagementCanisterRecord>(managementCanisterIdl, {\n    ...config,\n    canisterId: Principal.fromHex(''),\n    ...{\n      callTransform: transform,\n      queryTransform: transform,\n    },\n  });\n}\n", "import { Principal } from '@dfinity/principal';\nimport { RequestId } from '../request_id';\nimport { JsonObject } from '@dfinity/candid';\nimport { Identity } from '../auth';\nimport { HttpHeaderField } from './http/types';\n\n/**\n * Codes used by the replica for rejecting a message.\n * See {@link https://sdk.dfinity.org/docs/interface-spec/#reject-codes | the interface spec}.\n */\nexport enum ReplicaRejectCode {\n  SysFatal = 1,\n  SysTransient = 2,\n  DestinationInvalid = 3,\n  CanisterReject = 4,\n  CanisterError = 5,\n}\n\n/**\n * Options when doing a {@link Agent.readState} call.\n */\nexport interface ReadStateOptions {\n  /**\n   * A list of paths to read the state of.\n   */\n  paths: ArrayBuffer[][];\n}\n\n/**\n *\n */\nexport type QueryResponse = QueryResponseReplied | QueryResponseRejected;\n\nexport const enum QueryResponseStatus {\n  Replied = 'replied',\n  Rejected = 'rejected',\n}\n\nexport interface HttpDetailsResponse {\n  ok: boolean;\n  status: number;\n  statusText: string;\n  headers: HttpHeaderField[];\n}\n\nexport type ApiQueryResponse = QueryResponse & {\n  httpDetails: HttpDetailsResponse;\n  requestId: RequestId;\n};\n\nexport interface QueryResponseBase {\n  status: QueryResponseStatus;\n}\n\nexport type NodeSignature = {\n  // the batch time\n  timestamp: bigint;\n  // the signature\n  signature: Uint8Array;\n  // the ID of the node that created the signature\n  identity: Uint8Array;\n};\n\nexport interface QueryResponseReplied extends QueryResponseBase {\n  status: QueryResponseStatus.Replied;\n  reply: { arg: ArrayBuffer };\n  signatures?: NodeSignature[];\n}\n\nexport interface QueryResponseRejected extends QueryResponseBase {\n  status: QueryResponseStatus.Rejected;\n  reject_code: ReplicaRejectCode;\n  reject_message: string;\n  error_code: string;\n  signatures?: NodeSignature[];\n}\n\n/**\n * Options when doing a {@link Agent.query} call.\n */\nexport interface QueryFields {\n  /**\n   * The method name to call.\n   */\n  methodName: string;\n\n  /**\n   * A binary encoded argument. This is already encoded and will be sent as is.\n   */\n  arg: ArrayBuffer;\n}\n\n/**\n * Options when doing a {@link Agent.call} call.\n */\nexport interface CallOptions {\n  /**\n   * The method name to call.\n   */\n  methodName: string;\n\n  /**\n   * A binary encoded argument. This is already encoded and will be sent as is.\n   */\n  arg: ArrayBuffer;\n\n  /**\n   * An effective canister ID, used for routing. This should only be mentioned if\n   * it's different from the canister ID.\n   */\n  effectiveCanisterId: Principal | string;\n}\n\nexport interface ReadStateResponse {\n  certificate: ArrayBuffer;\n}\n\nexport interface SubmitResponse {\n  requestId: RequestId;\n  response: {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    body: {\n      error_code?: string;\n      reject_code: number;\n      reject_message: string;\n    } | null;\n    headers: HttpHeaderField[];\n  };\n}\n\n/**\n * An Agent able to make calls and queries to a Replica.\n */\nexport interface Agent {\n  readonly rootKey: ArrayBuffer | null;\n  /**\n   * Returns the principal ID associated with this agent (by default). It only shows\n   * the principal of the default identity in the agent, which is the principal used\n   * when calls don't specify it.\n   */\n  getPrincipal(): Promise<Principal>;\n\n  /**\n   * Create the request for the read state call.\n   * `readState` uses this internally.\n   * Useful to avoid signing the same request multiple times.\n   */\n  createReadStateRequest?(\n    options: ReadStateOptions,\n    identity?: Identity,\n    // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n  ): Promise<any>;\n\n  /**\n   * Send a read state query to the replica. This includes a list of paths to return,\n   * and will return a Certificate. This will only reject on communication errors,\n   * but the certificate might contain less information than requested.\n   * @param effectiveCanisterId A Canister ID related to this call.\n   * @param options The options for this call.\n   * @param identity Identity for the call. If not specified, uses the instance identity.\n   * @param request The request to send in case it has already been created.\n   */\n  readState(\n    effectiveCanisterId: Principal | string,\n    options: ReadStateOptions,\n    identity?: Identity,\n    // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n    request?: any,\n  ): Promise<ReadStateResponse>;\n\n  call(canisterId: Principal | string, fields: CallOptions): Promise<SubmitResponse>;\n\n  /**\n   * Query the status endpoint of the replica. This normally has a few fields that\n   * corresponds to the version of the replica, its root public key, and any other\n   * information made public.\n   * @returns A JsonObject that is essentially a record of fields from the status\n   *     endpoint.\n   */\n  status(): Promise<JsonObject>;\n\n  /**\n   * Send a query call to a canister. See\n   * {@link https://sdk.dfinity.org/docs/interface-spec/#http-query | the interface spec}.\n   * @param canisterId The Principal of the Canister to send the query to. Sending a query to\n   *     the management canister is not supported (as it has no meaning from an agent).\n   * @param options Options to use to create and send the query.\n   * @param identity Sender principal to use when sending the query.\n   * @returns The response from the replica. The Promise will only reject when the communication\n   *     failed. If the query itself failed but no protocol errors happened, the response will\n   *     be of type QueryResponseRejected.\n   */\n  query(\n    canisterId: Principal | string,\n    options: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse>;\n\n  /**\n   * By default, the agent is configured to talk to the main Internet Computer,\n   * and verifies responses using a hard-coded public key.\n   *\n   * This function will instruct the agent to ask the endpoint for its public\n   * key, and use that instead. This is required when talking to a local test\n   * instance, for example.\n   *\n   * Only use this when you are  _not_ talking to the main Internet Computer,\n   * otherwise you are prone to man-in-the-middle attacks! Do not call this\n   * function by default.\n   */\n  fetchRootKey(): Promise<ArrayBuffer>;\n  /**\n   * If an application needs to invalidate an identity under certain conditions, an `Agent` may expose an `invalidateIdentity` method.\n   * Invoking this method will set the inner identity used by the `Agent` to `null`.\n   *\n   * A use case for this would be - after a certain period of inactivity, a secure application chooses to invalidate the identity of any `HttpAgent` instances. An invalid identity can be replaced by `Agent.replaceIdentity`\n   */\n  invalidateIdentity?(): void;\n  /**\n   * If an application needs to replace an identity under certain conditions, an `Agent` may expose a `replaceIdentity` method.\n   * Invoking this method will set the inner identity used by the `Agent` to a newly provided identity.\n   *\n   * A use case for this would be - after authenticating using `@dfinity/auth-client`, you can replace the `AnonymousIdentity` of your `Actor` with a `DelegationIdentity`.\n   *\n   * ```Actor.agentOf(defaultActor).replaceIdentity(await authClient.getIdentity());```\n   */\n  replaceIdentity?(identity: Identity): void;\n}\n", "import { Principal } from '@dfinity/principal';\nimport { HttpAgentRequest } from './agent/http/types';\nimport { requestIdOf } from './request_id';\nimport { concat, toHex } from './utils/buffer';\n\nconst domainSeparator = new TextEncoder().encode('\\x0Aic-request');\n\n/**\n * A Key Pair, containing a secret and public key.\n */\nexport interface KeyPair {\n  secretKey: ArrayBuffer;\n  publicKey: PublicKey;\n}\n\n/**\n * A public key that is DER encoded. This is a branded ArrayBuffer.\n */\nexport type DerEncodedPublicKey = ArrayBuffer & { __derEncodedPublicKey__?: void };\n\n/**\n * A signature array buffer.\n */\nexport type Signature = ArrayBuffer & { __signature__: void };\n\n/**\n * A Public Key implementation.\n */\nexport interface PublicKey {\n  toDer(): DerEncodedPublicKey;\n  // rawKey and derKey are optional for backwards compatibility.\n  rawKey?: ArrayBuffer;\n  derKey?: DerEncodedPublicKey;\n}\n\n/**\n * A General Identity object. This does not have to be a private key (for example,\n * the Anonymous identity), but it must be able to transform request.\n */\nexport interface Identity {\n  /**\n   * Get the principal represented by this identity. Normally should be a\n   * `Principal.selfAuthenticating()`.\n   */\n  getPrincipal(): Principal;\n\n  /**\n   * Transform a request into a signed version of the request. This is done last\n   * after the transforms on the body of a request. The returned object can be\n   * anything, but must be serializable to CBOR.\n   */\n  transformRequest(request: HttpAgentRequest): Promise<unknown>;\n}\n\n/**\n * An Identity that can sign blobs.\n */\nexport abstract class SignIdentity implements Identity {\n  protected _principal: Principal | undefined;\n\n  /**\n   * Returns the public key that would match this identity's signature.\n   */\n  public abstract getPublicKey(): PublicKey;\n\n  /**\n   * Signs a blob of data, with this identity's private key.\n   */\n  public abstract sign(blob: ArrayBuffer): Promise<Signature>;\n\n  /**\n   * Get the principal represented by this identity. Normally should be a\n   * `Principal.selfAuthenticating()`.\n   */\n  public getPrincipal(): Principal {\n    if (!this._principal) {\n      this._principal = Principal.selfAuthenticating(new Uint8Array(this.getPublicKey().toDer()));\n    }\n    return this._principal;\n  }\n\n  /**\n   * Transform a request into a signed version of the request. This is done last\n   * after the transforms on the body of a request. The returned object can be\n   * anything, but must be serializable to CBOR.\n   * @param request - internet computer request to transform\n   */\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    const { body, ...fields } = request;\n    const requestId = await requestIdOf(body);\n    return {\n      ...fields,\n      body: {\n        content: body,\n        sender_pubkey: this.getPublicKey().toDer(),\n        sender_sig: await this.sign(concat(domainSeparator, requestId)),\n      },\n    };\n  }\n}\n\nexport class AnonymousIdentity implements Identity {\n  public getPrincipal(): Principal {\n    return Principal.anonymous();\n  }\n\n  public async transformRequest(request: HttpAgentRequest): Promise<unknown> {\n    return {\n      ...request,\n      body: { content: request.body },\n    };\n  }\n}\n\n/*\n * We need to communicate with other agents on the page about identities,\n * but those messages may need to go across boundaries where it's not possible to\n * serialize/deserialize object prototypes easily.\n * So these are lightweight, serializable objects that contain enough information to recreate\n * SignIdentities, but don't commit to having all methods of SignIdentity.\n *\n * Use Case:\n * * DOM Events that let differently-versioned components communicate to one another about\n *   Identities, even if they're using slightly different versions of agent packages to\n *   create/interpret them.\n */\nexport interface AnonymousIdentityDescriptor {\n  type: 'AnonymousIdentity';\n}\nexport interface PublicKeyIdentityDescriptor {\n  type: 'PublicKeyIdentity';\n  publicKey: string;\n}\nexport type IdentityDescriptor = AnonymousIdentityDescriptor | PublicKeyIdentityDescriptor;\n\n/**\n * Create an IdentityDescriptor from a @dfinity/identity Identity\n * @param identity - identity describe in returned descriptor\n */\nexport function createIdentityDescriptor(\n  identity: SignIdentity | AnonymousIdentity,\n): IdentityDescriptor {\n  const identityIndicator: IdentityDescriptor =\n    'getPublicKey' in identity\n      ? { type: 'PublicKeyIdentity', publicKey: toHex(identity.getPublicKey().toDer()) }\n      : { type: 'AnonymousIdentity' };\n  return identityIndicator;\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport * as cbor from 'simple-cbor';\nimport {\n  Endpoint,\n  HttpAgentRequest,\n  HttpAgentRequestTransformFn,\n  HttpHeaderField,\n  makeNonce,\n  Nonce,\n} from './types';\n\nconst NANOSECONDS_PER_MILLISECONDS = BigInt(1_000_000);\n\nconst REPLICA_PERMITTED_DRIFT_MILLISECONDS = 60 * 1000;\n\nexport class Expiry {\n  private readonly _value: bigint;\n\n  constructor(deltaInMSec: number) {\n    // Use bigint because it can overflow the maximum number allowed in a double float.\n    const raw_value =\n      BigInt(Math.floor(Date.now() + deltaInMSec - REPLICA_PERMITTED_DRIFT_MILLISECONDS)) *\n      NANOSECONDS_PER_MILLISECONDS;\n\n    // round down to the nearest second\n    const ingress_as_seconds = raw_value / BigInt(1_000_000_000);\n\n    // round down to nearest minute\n    const ingress_as_minutes = ingress_as_seconds / BigInt(60);\n\n    const rounded_down_nanos = ingress_as_minutes * BigInt(60) * BigInt(1_000_000_000);\n\n    this._value = rounded_down_nanos;\n  }\n\n  public toCBOR(): cbor.CborValue {\n    // TODO: change this to take the minimum amount of space (it always takes 8 bytes now).\n    return cbor.value.u64(this._value.toString(16), 16);\n  }\n\n  public toHash(): ArrayBuffer {\n    return lebEncode(this._value);\n  }\n}\n\n/**\n * Create a Nonce transform, which takes a function that returns a Buffer, and adds it\n * as the nonce to every call requests.\n * @param nonceFn A function that returns a buffer. By default uses a semi-random method.\n */\nexport function makeNonceTransform(nonceFn: () => Nonce = makeNonce): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    // Nonce needs to be inserted into the header for all requests, to enable logs to be correlated with requests.\n    const headers = request.request.headers;\n    // TODO: uncomment this when the http proxy supports it.\n    // headers.set('X-IC-Request-ID', toHex(new Uint8Array(nonce)));\n    request.request.headers = headers;\n\n    // Nonce only needs to be inserted into the body for async calls, to prevent replay attacks.\n    if (request.endpoint === Endpoint.Call) {\n      request.body.nonce = nonceFn();\n    }\n  };\n}\n\n/**\n * Create a transform that adds a delay (by default 5 minutes) to the expiry.\n *\n * @param delayInMilliseconds The delay to add to the call time, in milliseconds.\n */\nexport function makeExpiryTransform(delayInMilliseconds: number): HttpAgentRequestTransformFn {\n  return async (request: HttpAgentRequest) => {\n    request.body.ingress_expiry = new Expiry(delayInMilliseconds);\n  };\n}\n\n/**\n * Maps the default fetch headers field to the serializable HttpHeaderField.\n *\n * @param headers Fetch definition of the headers type\n * @returns array of header fields\n */\nexport function httpHeadersTransform(headers: Headers): HttpHeaderField[] {\n  const headerFields: HttpHeaderField[] = [];\n  headers.forEach((value, key) => {\n    headerFields.push([key, value]);\n  });\n  return headerFields;\n}\n", "/**\n * Generates a random unsigned 32-bit integer between 0 and 0xffffffff\n * @returns {number} a random number\n */\nexport const randomNumber = (): number => {\n  // determine whether browser crypto is available\n  if (typeof window !== 'undefined' && !!window.crypto && !!window.crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0];\n  }\n  // A second check for webcrypto, in case it is loaded under global instead of window\n  if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return array[0];\n  }\n\n  type nodeCrypto = {\n    randomInt: (min: number, max: number) => number;\n  };\n\n  // determine whether node crypto is available\n  if (typeof crypto !== 'undefined' && (crypto as unknown as nodeCrypto).randomInt) {\n    return (crypto as unknown as nodeCrypto).randomInt(0, 0xffffffff);\n  }\n\n  // fall back to Math.random\n  return Math.floor(Math.random() * 0xffffffff);\n};\n", "import type { Principal } from '@dfinity/principal';\nimport { Expiry } from './transforms';\nimport { randomNumber } from '../../utils/random';\n\n/**\n * @internal\n */\nexport const enum Endpoint {\n  Query = 'read',\n  ReadState = 'read_state',\n  Call = 'call',\n}\n\n// An HttpAgent request, before it gets encoded and sent to the server.\n// We create an empty request that we will fill later.\nexport type HttpAgentRequest =\n  | HttpAgentQueryRequest\n  | HttpAgentSubmitRequest\n  | HttpAgentReadStateRequest;\n\nexport interface HttpAgentBaseRequest {\n  readonly endpoint: Endpoint;\n  request: RequestInit;\n}\n\nexport type HttpHeaderField = [string, string];\n\nexport interface HttpAgentSubmitRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.Call;\n  body: CallRequest;\n}\n\nexport interface HttpAgentQueryRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.Query;\n  body: ReadRequest;\n}\n\nexport interface HttpAgentReadStateRequest extends HttpAgentBaseRequest {\n  readonly endpoint: Endpoint.ReadState;\n  body: ReadRequest;\n}\n\nexport interface Signed<T> {\n  content: T;\n  sender_pubkey: ArrayBuffer;\n  sender_sig: ArrayBuffer;\n}\n\nexport interface UnSigned<T> {\n  content: T;\n}\n\nexport type Envelope<T> = Signed<T> | UnSigned<T>;\n\nexport interface HttpAgentRequestTransformFn {\n  (args: HttpAgentRequest): Promise<HttpAgentRequest | undefined | void>;\n  priority?: number;\n}\n\n// The fields in a \"call\" submit request.\nexport interface CallRequest extends Record<string, any> {\n  request_type: SubmitRequestType.Call;\n  canister_id: Principal;\n  method_name: string;\n  arg: ArrayBuffer;\n  sender: Uint8Array | Principal;\n  ingress_expiry: Expiry;\n}\n\n// The types of values allowed in the `request_type` field for submit requests.\nexport enum SubmitRequestType {\n  Call = 'call',\n}\n\n// The types of values allowed in the `request_type` field for read requests.\nexport const enum ReadRequestType {\n  Query = 'query',\n  ReadState = 'read_state',\n}\n\n// The fields in a \"query\" read request.\nexport interface QueryRequest extends Record<string, any> {\n  request_type: ReadRequestType.Query;\n  canister_id: Principal;\n  method_name: string;\n  arg: ArrayBuffer;\n  sender: Uint8Array | Principal;\n  ingress_expiry: Expiry;\n}\n\nexport interface ReadStateRequest extends Record<string, any> {\n  request_type: ReadRequestType.ReadState;\n  paths: ArrayBuffer[][];\n  ingress_expiry: Expiry;\n  sender: Uint8Array | Principal;\n}\n\nexport type ReadRequest = QueryRequest | ReadStateRequest;\n\n// A Nonce that can be used for calls.\nexport type Nonce = Uint8Array & { __nonce__: void };\n\n/**\n * Create a random Nonce, based on random values\n */\nexport function makeNonce(): Nonce {\n  // Encode 128 bits.\n  const buffer = new ArrayBuffer(16);\n  const view = new DataView(buffer);\n  const rand1 = randomNumber();\n  const rand2 = randomNumber();\n  const rand3 = randomNumber();\n  const rand4 = randomNumber();\n\n  view.setUint32(0, rand1);\n  view.setUint32(4, rand2);\n  view.setUint32(8, rand3);\n  view.setUint32(12, rand4);\n\n  return buffer as Nonce;\n}\n", "import { HttpDetailsResponse } from '../api';\n\nexport class AgentHTTPResponseError extends Error {\n  constructor(message: string, public readonly response: HttpDetailsResponse) {\n    super(message);\n    this.name = this.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n", "export type ExpirableMapOptions<K, V> = {\n  source?: Iterable<[K, V]>;\n  expirationTime?: number;\n};\n\n/**\n * A map that expires entries after a given time.\n * Defaults to 10 minutes.\n */\nexport class ExpirableMap<K, V> implements Map<K, V> {\n  // Internals\n  #inner: Map<K, { value: V; timestamp: number }>;\n  #expirationTime: number;\n\n  [Symbol.iterator]: () => IterableIterator<[K, V]> = this.entries.bind(this);\n  [Symbol.toStringTag] = 'ExpirableMap';\n\n  /**\n   * Create a new ExpirableMap.\n   * @param {ExpirableMapOptions<any, any>} options - options for the map.\n   * @param {Iterable<[any, any]>} options.source - an optional source of entries to initialize the map with.\n   * @param {number} options.expirationTime - the time in milliseconds after which entries will expire.\n   */\n  constructor(options: ExpirableMapOptions<K, V> = {}) {\n    const { source = [], expirationTime = 10 * 60 * 1000 } = options;\n    const currentTime = Date.now();\n    this.#inner = new Map(\n      [...source].map(([key, value]) => [key, { value, timestamp: currentTime }]),\n    );\n    this.#expirationTime = expirationTime;\n  }\n\n  /**\n   * Prune removes all expired entries.\n   */\n  prune() {\n    const currentTime = Date.now();\n    for (const [key, entry] of this.#inner.entries()) {\n      if (currentTime - entry.timestamp > this.#expirationTime) {\n        this.#inner.delete(key);\n      }\n    }\n    return this;\n  }\n\n  // Implementing the Map interface\n\n  /**\n   * Set the value for the given key. Prunes expired entries.\n   * @param key for the entry\n   * @param value of the entry\n   * @returns this\n   */\n  set(key: K, value: V) {\n    this.prune();\n    const entry = {\n      value,\n      timestamp: Date.now(),\n    };\n    this.#inner.set(key, entry);\n\n    return this;\n  }\n\n  /**\n   * Get the value associated with the key, if it exists and has not expired.\n   * @param key K\n   * @returns the value associated with the key, or undefined if the key is not present or has expired.\n   */\n  get(key: K) {\n    const entry = this.#inner.get(key);\n    if (entry === undefined) {\n      return undefined;\n    }\n    if (Date.now() - entry.timestamp > this.#expirationTime) {\n      this.#inner.delete(key);\n      return undefined;\n    }\n    return entry.value;\n  }\n\n  /**\n   * Clear all entries.\n   */\n  clear() {\n    this.#inner.clear();\n  }\n\n  /**\n   * Entries returns the entries of the map, without the expiration time.\n   * @returns an iterator over the entries of the map.\n   */\n  entries(): IterableIterator<[K, V]> {\n    const iterator = this.#inner.entries();\n    const generator = function* () {\n      for (const [key, value] of iterator) {\n        yield [key, value.value] as [K, V];\n      }\n    };\n    return generator();\n  }\n\n  /**\n   * Values returns the values of the map, without the expiration time.\n   * @returns an iterator over the values of the map.\n   */\n  values(): IterableIterator<V> {\n    const iterator = this.#inner.values();\n    const generator = function* () {\n      for (const value of iterator) {\n        yield value.value;\n      }\n    };\n    return generator();\n  }\n\n  /**\n   * Keys returns the keys of the map\n   * @returns an iterator over the keys of the map.\n   */\n  keys(): IterableIterator<K> {\n    return this.#inner.keys();\n  }\n\n  /**\n   * forEach calls the callbackfn on each entry of the map.\n   * @param callbackfn to call on each entry\n   * @param thisArg to use as this when calling the callbackfn\n   */\n  forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: ExpirableMap<K, V>) {\n    for (const [key, value] of this.#inner.entries()) {\n      callbackfn.call(thisArg, value.value, key, this);\n    }\n  }\n\n  /**\n   * has returns true if the key exists and has not expired.\n   * @param key K\n   * @returns true if the key exists and has not expired.\n   */\n  has(key: K): boolean {\n    return this.#inner.has(key);\n  }\n\n  /**\n   * delete the entry for the given key.\n   * @param key K\n   * @returns true if the key existed and has been deleted.\n   */\n  delete(key: K) {\n    return this.#inner.delete(key);\n  }\n\n  /**\n   * get size of the map.\n   * @returns the size of the map.\n   */\n  get size() {\n    return this.#inner.size;\n  }\n}\n", "import { bufEquals } from './utils/buffer';\n\nexport const encodeLenBytes = (len: number): number => {\n  if (len <= 0x7f) {\n    return 1;\n  } else if (len <= 0xff) {\n    return 2;\n  } else if (len <= 0xffff) {\n    return 3;\n  } else if (len <= 0xffffff) {\n    return 4;\n  } else {\n    throw new Error('Length too long (> 4 bytes)');\n  }\n};\n\nexport const encodeLen = (buf: Uint8Array, offset: number, len: number): number => {\n  if (len <= 0x7f) {\n    buf[offset] = len;\n    return 1;\n  } else if (len <= 0xff) {\n    buf[offset] = 0x81;\n    buf[offset + 1] = len;\n    return 2;\n  } else if (len <= 0xffff) {\n    buf[offset] = 0x82;\n    buf[offset + 1] = len >> 8;\n    buf[offset + 2] = len;\n    return 3;\n  } else if (len <= 0xffffff) {\n    buf[offset] = 0x83;\n    buf[offset + 1] = len >> 16;\n    buf[offset + 2] = len >> 8;\n    buf[offset + 3] = len;\n    return 4;\n  } else {\n    throw new Error('Length too long (> 4 bytes)');\n  }\n};\n\nexport const decodeLenBytes = (buf: Uint8Array, offset: number): number => {\n  if (buf[offset] < 0x80) return 1;\n  if (buf[offset] === 0x80) throw new Error('Invalid length 0');\n  if (buf[offset] === 0x81) return 2;\n  if (buf[offset] === 0x82) return 3;\n  if (buf[offset] === 0x83) return 4;\n  throw new Error('Length too long (> 4 bytes)');\n};\n\nexport const decodeLen = (buf: Uint8Array, offset: number): number => {\n  const lenBytes = decodeLenBytes(buf, offset);\n  if (lenBytes === 1) return buf[offset];\n  else if (lenBytes === 2) return buf[offset + 1];\n  else if (lenBytes === 3) return (buf[offset + 1] << 8) + buf[offset + 2];\n  else if (lenBytes === 4)\n    return (buf[offset + 1] << 16) + (buf[offset + 2] << 8) + buf[offset + 3];\n  throw new Error('Length too long (> 4 bytes)');\n};\n\n/**\n * A DER encoded `SEQUENCE(OID)` for DER-encoded-COSE\n */\nexport const DER_COSE_OID = Uint8Array.from([\n  ...[0x30, 0x0c], // SEQUENCE\n  ...[0x06, 0x0a], // OID with 10 bytes\n  ...[0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0xb8, 0x43, 0x01, 0x01], // DER encoded COSE\n]);\n\n/**\n * A DER encoded `SEQUENCE(OID)` for the Ed25519 algorithm\n */\nexport const ED25519_OID = Uint8Array.from([\n  ...[0x30, 0x05], // SEQUENCE\n  ...[0x06, 0x03], // OID with 3 bytes\n  ...[0x2b, 0x65, 0x70], // id-Ed25519 OID\n]);\n\n/**\n * A DER encoded `SEQUENCE(OID)` for secp256k1 with the ECDSA algorithm\n */\nexport const SECP256K1_OID = Uint8Array.from([\n  ...[0x30, 0x10], // SEQUENCE\n  ...[0x06, 0x07], // OID with 7 bytes\n  ...[0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01], // OID ECDSA\n  ...[0x06, 0x05], // OID with 5 bytes\n  ...[0x2b, 0x81, 0x04, 0x00, 0x0a], // OID secp256k1\n]);\n\n/**\n * Wraps the given `payload` in a DER encoding tagged with the given encoded `oid` like so:\n * `SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param payload The payload to encode as the bit string\n * @param oid The DER encoded (and SEQUENCE wrapped!) OID to tag the payload with\n */\nexport function wrapDER(payload: ArrayBuffer, oid: Uint8Array): Uint8Array {\n  // The Bit String header needs to include the unused bit count byte in its length\n  const bitStringHeaderLength = 2 + encodeLenBytes(payload.byteLength + 1);\n  const len = oid.byteLength + bitStringHeaderLength + payload.byteLength;\n  let offset = 0;\n  const buf = new Uint8Array(1 + encodeLenBytes(len) + len);\n  // Sequence\n  buf[offset++] = 0x30;\n  // Sequence Length\n  offset += encodeLen(buf, offset, len);\n\n  // OID\n  buf.set(oid, offset);\n  offset += oid.byteLength;\n\n  // Bit String Header\n  buf[offset++] = 0x03;\n  offset += encodeLen(buf, offset, payload.byteLength + 1);\n  // 0 padding\n  buf[offset++] = 0x00;\n  buf.set(new Uint8Array(payload), offset);\n\n  return buf;\n}\n\n/**\n * Extracts a payload from the given `derEncoded` data, and checks that it was tagged with the given `oid`.\n *\n * `derEncoded = SEQUENCE(oid, BITSTRING(payload))`\n *\n * @param derEncoded The DER encoded and tagged data\n * @param oid The DER encoded (and SEQUENCE wrapped!) expected OID\n * @returns The unwrapped payload\n */\nexport const unwrapDER = (derEncoded: ArrayBuffer, oid: Uint8Array): Uint8Array => {\n  let offset = 0;\n  const expect = (n: number, msg: string) => {\n    if (buf[offset++] !== n) {\n      throw new Error('Expected: ' + msg);\n    }\n  };\n\n  const buf = new Uint8Array(derEncoded);\n  expect(0x30, 'sequence');\n  offset += decodeLenBytes(buf, offset);\n\n  if (!bufEquals(buf.slice(offset, offset + oid.byteLength), oid)) {\n    throw new Error('Not the expected OID.');\n  }\n  offset += oid.byteLength;\n\n  expect(0x03, 'bit string');\n  const payloadLen = decodeLen(buf, offset) - 1; // Subtracting 1 to account for the 0 padding\n  offset += decodeLenBytes(buf, offset);\n  expect(0x00, '0 padding');\n  const result = buf.slice(offset);\n  if (payloadLen !== result.length) {\n    throw new Error(\n      `DER payload mismatch: Expected length ${payloadLen} actual length ${result.length}`,\n    );\n  }\n  return result;\n};\n", "import { DerEncodedPublicKey, PublicKey } from './auth';\nimport { ED25519_OID, unwrapDER, wrapDER } from './der';\n\nexport class Ed25519PublicKey implements PublicKey {\n  public static from(key: PublicKey): Ed25519PublicKey {\n    return this.fromDer(key.toDer());\n  }\n\n  public static fromRaw(rawKey: ArrayBuffer): Ed25519PublicKey {\n    return new Ed25519PublicKey(rawKey);\n  }\n\n  public static fromDer(derKey: DerEncodedPublicKey): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.derDecode(derKey));\n  }\n\n  // The length of Ed25519 public keys is always 32 bytes.\n  private static RAW_KEY_LENGTH = 32;\n\n  private static derEncode(publicKey: ArrayBuffer): DerEncodedPublicKey {\n    return wrapDER(publicKey, ED25519_OID).buffer as DerEncodedPublicKey;\n  }\n\n  private static derDecode(key: DerEncodedPublicKey): ArrayBuffer {\n    const unwrapped = unwrapDER(key, ED25519_OID);\n    if (unwrapped.length !== this.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    return unwrapped;\n  }\n\n  #rawKey: ArrayBuffer;\n\n  public get rawKey(): ArrayBuffer {\n    return this.#rawKey;\n  }\n\n  #derKey: DerEncodedPublicKey;\n\n  public get derKey(): DerEncodedPublicKey {\n    return this.#derKey;\n  }\n\n  // `fromRaw` and `fromDer` should be used for instantiation, not this constructor.\n  private constructor(key: ArrayBuffer) {\n    if (key.byteLength !== Ed25519PublicKey.RAW_KEY_LENGTH) {\n      throw new Error('An Ed25519 public key must be exactly 32bytes long');\n    }\n    this.#rawKey = key;\n    this.#derKey = Ed25519PublicKey.derEncode(key);\n  }\n\n  public toDer(): DerEncodedPublicKey {\n    return this.derKey;\n  }\n\n  public toRaw(): ArrayBuffer {\n    return this.rawKey;\n  }\n}\n", "import { JsonObject } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../../errors';\nimport { AnonymousIdentity, Identity } from '../../auth';\nimport * as cbor from '../../cbor';\nimport { hashOfMap, requestIdOf } from '../../request_id';\nimport { concat, fromHex } from '../../utils/buffer';\nimport {\n  Agent,\n  ApiQueryResponse,\n  QueryFields,\n  QueryResponse,\n  ReadStateOptions,\n  ReadStateResponse,\n  SubmitResponse,\n} from '../api';\nimport { Expiry, httpHeadersTransform, makeNonceTransform } from './transforms';\nimport {\n  CallRequest,\n  Endpoint,\n  HttpAgentRequest,\n  HttpAgentRequestTransformFn,\n  HttpAgentSubmitRequest,\n  makeNonce,\n  QueryRequest,\n  ReadRequestType,\n  SubmitRequestType,\n} from './types';\nimport { AgentHTTPResponseError } from './errors';\nimport { SubnetStatus, request } from '../../canisterStatus';\nimport { CertificateVerificationError } from '../../certificate';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport { ExpirableMap } from '../../utils/expirableMap';\nimport { Ed25519PublicKey } from '../../public_key';\n\nexport * from './transforms';\nexport { Nonce, makeNonce } from './types';\n\nexport enum RequestStatusResponseStatus {\n  Received = 'received',\n  Processing = 'processing',\n  Replied = 'replied',\n  Rejected = 'rejected',\n  Unknown = 'unknown',\n  Done = 'done',\n}\n\n// Default delta for ingress expiry is 5 minutes.\nconst DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS = 5 * 60 * 1000;\n\n// Root public key for the IC, encoded as hex\nconst IC_ROOT_KEY =\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100814' +\n  'c0e6ec71fab583b08bd81373c255c3c371b2e84863c98a4f1e08b74235d14fb5d9c0cd546d968' +\n  '5f913a0c0b2cc5341583bf4b4392e467db96d65b9bb4cb717112f8472e0d5a4d14505ffd7484' +\n  'b01291091c5f87b98883463f98091a0baaae';\n\n// IC0 domain info\nconst IC0_DOMAIN = 'ic0.app';\nconst IC0_SUB_DOMAIN = '.ic0.app';\n\nconst ICP0_DOMAIN = 'icp0.io';\nconst ICP0_SUB_DOMAIN = '.icp0.io';\n\nconst ICP_API_DOMAIN = 'icp-api.io';\nconst ICP_API_SUB_DOMAIN = '.icp-api.io';\n\nclass HttpDefaultFetchError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\nexport class IdentityInvalidError extends AgentError {\n  constructor(public readonly message: string) {\n    super(message);\n  }\n}\n\n// HttpAgent options that can be used at construction.\nexport interface HttpAgentOptions {\n  // Another HttpAgent to inherit configuration (pipeline and fetch) of. This\n  // is only used at construction.\n  source?: HttpAgent;\n\n  // A surrogate to the global fetch function. Useful for testing.\n  fetch?: typeof fetch;\n\n  // Additional options to pass along to fetch. Will not override fields that\n  // the agent already needs to set\n  // Should follow the RequestInit interface, but we intentially support non-standard fields\n  fetchOptions?: Record<string, unknown>;\n\n  // Additional options to pass along to fetch for the call API.\n  callOptions?: Record<string, unknown>;\n\n  // The host to use for the client. By default, uses the same host as\n  // the current page.\n  host?: string;\n\n  // The principal used to send messages. This cannot be empty at the request\n  // time (will throw).\n  identity?: Identity | Promise<Identity>;\n\n  credentials?: {\n    name: string;\n    password?: string;\n  };\n  /**\n   * Adds a unique {@link Nonce} with each query.\n   * Enabling will prevent queries from being answered with a cached response.\n   *\n   * @example\n   * const agent = new HttpAgent({ useQueryNonces: true });\n   * agent.addTransform(makeNonceTransform(makeNonce);\n   * @default false\n   */\n  useQueryNonces?: boolean;\n  /**\n   * Number of times to retry requests before throwing an error\n   * @default 3\n   */\n  retryTimes?: number;\n  /**\n   * Whether the agent should verify signatures signed by node keys on query responses. Increases security, but adds overhead and must make a separate request to cache the node keys for the canister's subnet.\n   * @default true\n   */\n  verifyQuerySignatures?: boolean;\n}\n\nfunction getDefaultFetch(): typeof fetch {\n  let defaultFetch;\n\n  if (typeof window !== 'undefined') {\n    // Browser context\n    if (window.fetch) {\n      defaultFetch = window.fetch.bind(window);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a browser context, but window.fetch was not present.',\n      );\n    }\n  } else if (typeof global !== 'undefined') {\n    // Node context\n    if (global.fetch) {\n      defaultFetch = global.fetch.bind(global);\n    } else {\n      throw new HttpDefaultFetchError(\n        'Fetch implementation was not available. You appear to be in a Node.js context, but global.fetch was not available.',\n      );\n    }\n  } else if (typeof self !== 'undefined') {\n    if (self.fetch) {\n      defaultFetch = self.fetch.bind(self);\n    }\n  }\n\n  if (defaultFetch) {\n    return defaultFetch;\n  }\n  throw new HttpDefaultFetchError(\n    'Fetch implementation was not available. Please provide fetch to the HttpAgent constructor, or ensure it is available in the window or global context.',\n  );\n}\n\n// A HTTP agent allows users to interact with a client of the internet computer\n// using the available methods. It exposes an API that closely follows the\n// public view of the internet computer, and is not intended to be exposed\n// directly to the majority of users due to its low-level interface.\n//\n// There is a pipeline to apply transformations to the request before sending\n// it to the client. This is to decouple signature, nonce generation and\n// other computations so that this class can stay as simple as possible while\n// allowing extensions.\nexport class HttpAgent implements Agent {\n  public rootKey = fromHex(IC_ROOT_KEY);\n  private _identity: Promise<Identity> | null;\n  private readonly _fetch: typeof fetch;\n  private readonly _fetchOptions?: Record<string, unknown>;\n  private readonly _callOptions?: Record<string, unknown>;\n  private _timeDiffMsecs = 0;\n  private readonly _host: URL;\n  private readonly _credentials: string | undefined;\n  private _rootKeyFetched = false;\n  private readonly _retryTimes; // Retry requests N times before erroring by default\n  public readonly _isAgent = true;\n\n  #queryPipeline: HttpAgentRequestTransformFn[] = [];\n  #updatePipeline: HttpAgentRequestTransformFn[] = [];\n\n  #subnetKeys: ExpirableMap<string, SubnetStatus> = new ExpirableMap({\n    expirationTime: 5 * 60 * 1000, // 5 minutes\n  });\n  #verifyQuerySignatures = true;\n\n  constructor(options: HttpAgentOptions = {}) {\n    if (options.source) {\n      if (!(options.source instanceof HttpAgent)) {\n        throw new Error(\"An Agent's source can only be another HttpAgent\");\n      }\n      this._identity = options.source._identity;\n      this._fetch = options.source._fetch;\n      this._host = options.source._host;\n      this._credentials = options.source._credentials;\n    } else {\n      this._fetch = options.fetch || getDefaultFetch() || fetch.bind(global);\n      this._fetchOptions = options.fetchOptions;\n      this._callOptions = options.callOptions;\n    }\n    if (options.host !== undefined) {\n      if (!options.host.match(/^[a-z]+:/) && typeof window !== 'undefined') {\n        this._host = new URL(window.location.protocol + '//' + options.host);\n      } else {\n        this._host = new URL(options.host);\n      }\n    } else if (options.source !== undefined) {\n      // Safe to ignore here.\n      this._host = options.source._host;\n    } else {\n      const location = typeof window !== 'undefined' ? window.location : undefined;\n      if (!location) {\n        this._host = new URL('https://icp-api.io');\n        console.warn(\n          'Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.',\n        );\n      }\n      // Mainnet and local will have the api route available\n      const knownHosts = ['ic0.app', 'icp0.io', '127.0.0.1', 'localhost'];\n      const hostname = location?.hostname;\n      let knownHost;\n      if (hostname && typeof hostname === 'string') {\n        knownHost = knownHosts.find(host => hostname.endsWith(host));\n      }\n\n      if (location && knownHost) {\n        // If the user is on a boundary-node provided host, we can use the same host for the agent\n        this._host = new URL(\n          `${location.protocol}//${knownHost}${location.port ? ':' + location.port : ''}`,\n        );\n      } else {\n        this._host = new URL('https://icp-api.io');\n        console.warn(\n          'Could not infer host from window.location, defaulting to mainnet gateway of https://icp-api.io. Please provide a host to the HttpAgent constructor to avoid this warning.',\n        );\n      }\n    }\n    if (options.verifyQuerySignatures !== undefined) {\n      this.#verifyQuerySignatures = options.verifyQuerySignatures;\n    }\n    // Default is 3, only set from option if greater or equal to 0\n    this._retryTimes =\n      options.retryTimes !== undefined && options.retryTimes >= 0 ? options.retryTimes : 3;\n    // Rewrite to avoid redirects\n    if (this._host.hostname.endsWith(IC0_SUB_DOMAIN)) {\n      this._host.hostname = IC0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP0_SUB_DOMAIN)) {\n      this._host.hostname = ICP0_DOMAIN;\n    } else if (this._host.hostname.endsWith(ICP_API_SUB_DOMAIN)) {\n      this._host.hostname = ICP_API_DOMAIN;\n    }\n\n    if (options.credentials) {\n      const { name, password } = options.credentials;\n      this._credentials = `${name}${password ? ':' + password : ''}`;\n    }\n    this._identity = Promise.resolve(options.identity || new AnonymousIdentity());\n\n    // Add a nonce transform to ensure calls are unique\n    this.addTransform('update', makeNonceTransform(makeNonce));\n    if (options.useQueryNonces) {\n      this.addTransform('query', makeNonceTransform(makeNonce));\n    }\n  }\n\n  public isLocal(): boolean {\n    const hostname = this._host.hostname;\n    return hostname === '127.0.0.1' || hostname.endsWith('127.0.0.1');\n  }\n\n  public addTransform(\n    type: 'update' | 'query',\n    fn: HttpAgentRequestTransformFn,\n    priority = fn.priority || 0,\n  ): void {\n    if (type === 'update') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#updatePipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#updatePipeline.splice(\n        i >= 0 ? i : this.#updatePipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    } else if (type === 'query') {\n      // Keep the pipeline sorted at all time, by priority.\n      const i = this.#queryPipeline.findIndex(x => (x.priority || 0) < priority);\n      this.#queryPipeline.splice(\n        i >= 0 ? i : this.#queryPipeline.length,\n        0,\n        Object.assign(fn, { priority }),\n      );\n    }\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    if (!this._identity) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    return (await this._identity).getPrincipal();\n  }\n\n  public async call(\n    canisterId: Principal | string,\n    options: {\n      methodName: string;\n      arg: ArrayBuffer;\n      effectiveCanisterId?: Principal | string;\n    },\n    identity?: Identity | Promise<Identity>,\n  ): Promise<SubmitResponse> {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const canister = Principal.from(canisterId);\n    const ecid = options.effectiveCanisterId\n      ? Principal.from(options.effectiveCanisterId)\n      : canister;\n\n    const sender: Principal = id.getPrincipal() || Principal.anonymous();\n\n    let ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS);\n\n    // If the value is off by more than 30 seconds, reconcile system time with the network\n    if (Math.abs(this._timeDiffMsecs) > 1_000 * 30) {\n      ingress_expiry = new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS + this._timeDiffMsecs);\n    }\n\n    const submit: CallRequest = {\n      request_type: SubmitRequestType.Call,\n      canister_id: canister,\n      method_name: options.methodName,\n      arg: options.arg,\n      sender,\n      ingress_expiry,\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let transformedRequest: any = (await this._transform({\n      request: {\n        body: null,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.Call,\n      body: submit,\n    })) as HttpAgentSubmitRequest;\n\n    // Apply transform for identity.\n    transformedRequest = await id.transformRequest(transformedRequest);\n\n    const body = cbor.encode(transformedRequest.body);\n\n    // Run both in parallel. The fetch is quite expensive, so we have plenty of time to\n    // calculate the requestId locally.\n    const request = this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/canister/${ecid.toText()}/call`, this._host), {\n        ...this._callOptions,\n        ...transformedRequest.request,\n        body,\n      }),\n    );\n\n    const [response, requestId] = await Promise.all([request, requestIdOf(submit)]);\n\n    const responseBuffer = await response.arrayBuffer();\n    const responseBody = (\n      response.status === 200 && responseBuffer.byteLength > 0 ? cbor.decode(responseBuffer) : null\n    ) as SubmitResponse['response']['body'];\n\n    return {\n      requestId,\n      response: {\n        ok: response.ok,\n        status: response.status,\n        statusText: response.statusText,\n        body: responseBody,\n        headers: httpHeadersTransform(response.headers),\n      },\n    };\n  }\n\n  private async _requestAndRetry(request: () => Promise<Response>, tries = 0): Promise<Response> {\n    let response: Response;\n    try {\n      response = await request();\n    } catch (error) {\n      if (this._retryTimes > tries) {\n        console.warn(\n          `Caught exception while attempting to make request:\\n` +\n            `  ${error}\\n` +\n            `  Retrying request.`,\n        );\n        return await this._requestAndRetry(request, tries + 1);\n      }\n      throw error;\n    }\n    if (response.ok) {\n      return response;\n    }\n\n    const responseText = await response.clone().text();\n    const errorMessage =\n      `Server returned an error:\\n` +\n      `  Code: ${response.status} (${response.statusText})\\n` +\n      `  Body: ${responseText}\\n`;\n\n    if (this._retryTimes > tries) {\n      console.warn(errorMessage + `  Retrying request.`);\n      return await this._requestAndRetry(request, tries + 1);\n    }\n\n    throw new AgentHTTPResponseError(errorMessage, {\n      ok: response.ok,\n      status: response.status,\n      statusText: response.statusText,\n      headers: httpHeadersTransform(response.headers),\n    });\n  }\n\n  public async query(\n    canisterId: Principal | string,\n    fields: QueryFields,\n    identity?: Identity | Promise<Identity>,\n  ): Promise<ApiQueryResponse> {\n    const makeQuery = async () => {\n      const id = await (identity !== undefined ? await identity : await this._identity);\n      if (!id) {\n        throw new IdentityInvalidError(\n          \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n        );\n      }\n\n      const canister = Principal.from(canisterId);\n      const sender = id?.getPrincipal() || Principal.anonymous();\n\n      const request: QueryRequest = {\n        request_type: ReadRequestType.Query,\n        canister_id: canister,\n        method_name: fields.methodName,\n        arg: fields.arg,\n        sender,\n        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n      };\n\n      const requestId = await requestIdOf(request);\n\n      // TODO: remove this any. This can be a Signed or UnSigned request.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let transformedRequest: any = await this._transform({\n        request: {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/cbor',\n            ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n          },\n        },\n        endpoint: Endpoint.Query,\n        body: request,\n      });\n\n      // Apply transform for identity.\n      transformedRequest = await id?.transformRequest(transformedRequest);\n\n      const body = cbor.encode(transformedRequest.body);\n\n      const response = await this._requestAndRetry(() =>\n        this._fetch('' + new URL(`/api/v2/canister/${canister.toText()}/query`, this._host), {\n          ...this._fetchOptions,\n          ...transformedRequest.request,\n          body,\n        }),\n      );\n\n      const queryResponse: QueryResponse = cbor.decode(await response.arrayBuffer());\n\n      return {\n        ...queryResponse,\n        httpDetails: {\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          headers: httpHeadersTransform(response.headers),\n        },\n        requestId,\n      };\n    };\n\n    const getSubnetStatus = async (): Promise<SubnetStatus | void> => {\n      if (!this.#verifyQuerySignatures) {\n        return undefined;\n      }\n      const subnetStatus = this.#subnetKeys.get(canisterId.toString());\n      if (subnetStatus) {\n        return subnetStatus;\n      }\n      await this.fetchSubnetKeys(canisterId.toString());\n      return this.#subnetKeys.get(canisterId.toString());\n    };\n    // Make query and fetch subnet keys in parallel\n    const [query, subnetStatus] = await Promise.all([makeQuery(), getSubnetStatus()]);\n    // Skip verification if the user has disabled it\n    if (!this.#verifyQuerySignatures) {\n      return query;\n    }\n    try {\n      return this.#verifyQueryResponse(query, subnetStatus);\n    } catch (_) {\n      // In case the node signatures have changed, refresh the subnet keys and try again\n      console.warn('Query response verification failed. Retrying with fresh subnet keys.');\n      this.#subnetKeys.delete(canisterId.toString());\n      await this.fetchSubnetKeys(canisterId.toString());\n\n      const updatedSubnetStatus = this.#subnetKeys.get(canisterId.toString());\n      if (!updatedSubnetStatus) {\n        throw new CertificateVerificationError(\n          'Invalid signature from replica signed query: no matching node key found.',\n        );\n      }\n      return this.#verifyQueryResponse(query, updatedSubnetStatus);\n    }\n  }\n\n  /**\n   * See https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-query for details on validation\n   * @param queryResponse - The response from the query\n   * @param subnetStatus - The subnet status, including all node keys\n   * @returns ApiQueryResponse\n   */\n  #verifyQueryResponse = (\n    queryResponse: ApiQueryResponse,\n    subnetStatus: SubnetStatus | void,\n  ): ApiQueryResponse => {\n    if (this.#verifyQuerySignatures === false) {\n      // This should not be called if the user has disabled verification\n      return queryResponse;\n    }\n    if (!subnetStatus) {\n      throw new CertificateVerificationError(\n        'Invalid signature from replica signed query: no matching node key found.',\n      );\n    }\n    const { status, signatures = [], requestId } = queryResponse;\n\n    const domainSeparator = new TextEncoder().encode('\\x0Bic-response');\n    for (const sig of signatures) {\n      const { timestamp, identity } = sig;\n      const nodeId = Principal.fromUint8Array(identity).toText();\n      let hash: ArrayBuffer;\n\n      // Hash is constructed differently depending on the status\n      if (status === 'replied') {\n        const { reply } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reply: reply,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else if (status === 'rejected') {\n        const { reject_code, reject_message, error_code } = queryResponse;\n        hash = hashOfMap({\n          status: status,\n          reject_code: reject_code,\n          reject_message: reject_message,\n          error_code: error_code,\n          timestamp: BigInt(timestamp),\n          request_id: requestId,\n        });\n      } else {\n        throw new Error(`Unknown status: ${status}`);\n      }\n\n      const separatorWithHash = concat(domainSeparator, new Uint8Array(hash));\n\n      // FIX: check for match without verifying N times\n      const pubKey = subnetStatus?.nodeKeys.get(nodeId);\n      if (!pubKey) {\n        throw new CertificateVerificationError(\n          'Invalid signature from replica signed query: no matching node key found.',\n        );\n      }\n      const rawKey = Ed25519PublicKey.fromDer(pubKey).rawKey;\n      const valid = ed25519.verify(\n        sig.signature,\n        new Uint8Array(separatorWithHash),\n        new Uint8Array(rawKey),\n      );\n      if (valid) return queryResponse;\n\n      throw new CertificateVerificationError(\n        `Invalid signature from replica ${nodeId} signed query.`,\n      );\n    }\n    return queryResponse;\n  };\n\n  public async createReadStateRequest(\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    const id = await (identity !== undefined ? await identity : await this._identity);\n    if (!id) {\n      throw new IdentityInvalidError(\n        \"This identity has expired due this application's security policy. Please refresh your authentication.\",\n      );\n    }\n    const sender = id?.getPrincipal() || Principal.anonymous();\n\n    // TODO: remove this any. This can be a Signed or UnSigned request.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const transformedRequest: any = await this._transform({\n      request: {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/cbor',\n          ...(this._credentials ? { Authorization: 'Basic ' + btoa(this._credentials) } : {}),\n        },\n      },\n      endpoint: Endpoint.ReadState,\n      body: {\n        request_type: ReadRequestType.ReadState,\n        paths: fields.paths,\n        sender,\n        ingress_expiry: new Expiry(DEFAULT_INGRESS_EXPIRY_DELTA_IN_MSECS),\n      },\n    });\n\n    // Apply transform for identity.\n    return id?.transformRequest(transformedRequest);\n  }\n\n  public async readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n    identity?: Identity | Promise<Identity>,\n    // eslint-disable-next-line\n    request?: any,\n  ): Promise<ReadStateResponse> {\n    const canister = typeof canisterId === 'string' ? Principal.fromText(canisterId) : canisterId;\n\n    const transformedRequest = request ?? (await this.createReadStateRequest(fields, identity));\n    const body = cbor.encode(transformedRequest.body);\n\n    // TODO - https://dfinity.atlassian.net/browse/SDK-1092\n    const response = await this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/canister/${canister}/read_state`, this._host), {\n        ...this._fetchOptions,\n        ...transformedRequest.request,\n        body,\n      }),\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Server returned an error:\\n` +\n          `  Code: ${response.status} (${response.statusText})\\n` +\n          `  Body: ${await response.text()}\\n`,\n      );\n    }\n    return cbor.decode(await response.arrayBuffer());\n  }\n\n  /**\n   * Allows agent to sync its time with the network. Can be called during intialization or mid-lifecycle if the device's clock has drifted away from the network time. This is necessary to set the Expiry for a request\n   * @param {Principal} canisterId - Pass a canister ID if you need to sync the time with a particular replica. Uses the management canister by default\n   */\n  public async syncTime(canisterId?: Principal): Promise<void> {\n    const CanisterStatus = await import('../../canisterStatus');\n    const callTime = Date.now();\n    try {\n      if (!canisterId) {\n        console.log(\n          'Syncing time with the IC. No canisterId provided, so falling back to ryjl3-tyaaa-aaaaa-aaaba-cai',\n        );\n      }\n      const status = await CanisterStatus.request({\n        // Fall back with canisterId of the ICP Ledger\n        canisterId: canisterId ?? Principal.from('ryjl3-tyaaa-aaaaa-aaaba-cai'),\n        agent: this,\n        paths: ['time'],\n      });\n\n      const replicaTime = status.get('time');\n      if (replicaTime) {\n        this._timeDiffMsecs = Number(replicaTime as any) - Number(callTime);\n      }\n    } catch (error) {\n      console.error('Caught exception while attempting to sync time:', error);\n    }\n  }\n\n  public async status(): Promise<JsonObject> {\n    const headers: Record<string, string> = this._credentials\n      ? {\n          Authorization: 'Basic ' + btoa(this._credentials),\n        }\n      : {};\n\n    const response = await this._requestAndRetry(() =>\n      this._fetch('' + new URL(`/api/v2/status`, this._host), { headers, ...this._fetchOptions }),\n    );\n\n    return cbor.decode(await response.arrayBuffer());\n  }\n\n  public async fetchRootKey(): Promise<ArrayBuffer> {\n    if (!this._rootKeyFetched) {\n      // Hex-encoded version of the replica root key\n      this.rootKey = ((await this.status()) as any).root_key;\n      this._rootKeyFetched = true;\n    }\n    return this.rootKey;\n  }\n\n  public invalidateIdentity(): void {\n    this._identity = null;\n  }\n\n  public replaceIdentity(identity: Identity): void {\n    this._identity = Promise.resolve(identity);\n  }\n\n  public async fetchSubnetKeys(canisterId: Principal | string) {\n    const effectiveCanisterId: Principal = Principal.from(canisterId);\n    const response = await request({\n      canisterId: effectiveCanisterId,\n      paths: ['subnet'],\n      agent: this,\n    });\n\n    const subnetResponse = response.get('subnet');\n    if (subnetResponse && typeof subnetResponse === 'object' && 'nodeKeys' in subnetResponse) {\n      this.#subnetKeys.set(effectiveCanisterId.toText(), subnetResponse as SubnetStatus);\n      return subnetResponse as SubnetStatus;\n    }\n    // If the subnet status is not returned, return undefined\n    return undefined;\n  }\n\n  protected _transform(request: HttpAgentRequest): Promise<HttpAgentRequest> {\n    let p = Promise.resolve(request);\n    if (request.endpoint === Endpoint.Call) {\n      for (const fn of this.#updatePipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    } else {\n      for (const fn of this.#queryPipeline) {\n        p = p.then(r => fn(r).then(r2 => r2 || r));\n      }\n    }\n\n    return p;\n  }\n}\n", "import { JsonObject } from '@dfinity/candid';\nimport {\n  Agent,\n  ApiQueryResponse,\n  CallOptions,\n  QueryFields,\n  QueryResponse,\n  ReadStateOptions,\n  ReadStateResponse,\n  SubmitResponse,\n} from './api';\nimport { Principal } from '@dfinity/principal';\n\nexport enum ProxyMessageKind {\n  Error = 'err',\n  GetPrincipal = 'gp',\n  GetPrincipalResponse = 'gpr',\n  Query = 'q',\n  QueryResponse = 'qr',\n  Call = 'c',\n  CallResponse = 'cr',\n  ReadState = 'rs',\n  ReadStateResponse = 'rsr',\n  Status = 's',\n  StatusResponse = 'sr',\n}\n\nexport interface ProxyMessageBase {\n  id: number;\n  type: ProxyMessageKind;\n}\n\nexport interface ProxyMessageError extends ProxyMessageBase {\n  type: ProxyMessageKind.Error;\n  error: any;\n}\n\nexport interface ProxyMessageGetPrincipal extends ProxyMessageBase {\n  type: ProxyMessageKind.GetPrincipal;\n}\n\nexport interface ProxyMessageGetPrincipalResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.GetPrincipalResponse;\n  response: string;\n}\n\nexport interface ProxyMessageQuery extends ProxyMessageBase {\n  type: ProxyMessageKind.Query;\n  args: [string, QueryFields];\n}\n\nexport interface ProxyMessageQueryResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.QueryResponse;\n  response: QueryResponse;\n}\n\nexport interface ProxyMessageCall extends ProxyMessageBase {\n  type: ProxyMessageKind.Call;\n  args: [string, CallOptions];\n}\n\nexport interface ProxyMessageCallResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.CallResponse;\n  response: SubmitResponse;\n}\n\nexport interface ProxyMessageReadState extends ProxyMessageBase {\n  type: ProxyMessageKind.ReadState;\n  args: [string, ReadStateOptions];\n}\n\nexport interface ProxyMessageReadStateResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.ReadStateResponse;\n  response: ReadStateResponse;\n}\n\nexport interface ProxyMessageStatus extends ProxyMessageBase {\n  type: ProxyMessageKind.Status;\n}\n\nexport interface ProxyMessageStatusResponse extends ProxyMessageBase {\n  type: ProxyMessageKind.StatusResponse;\n  response: JsonObject;\n}\n\nexport type ProxyMessage =\n  | ProxyMessageError\n  | ProxyMessageGetPrincipal\n  | ProxyMessageGetPrincipalResponse\n  | ProxyMessageQuery\n  | ProxyMessageQueryResponse\n  | ProxyMessageCall\n  | ProxyMessageReadState\n  | ProxyMessageReadStateResponse\n  | ProxyMessageCallResponse\n  | ProxyMessageStatus\n  | ProxyMessageStatusResponse;\n\n// A Stub Agent that forwards calls to another Agent implementation.\nexport class ProxyStubAgent {\n  constructor(private _frontend: (msg: ProxyMessage) => void, private _agent: Agent) {}\n\n  public onmessage(msg: ProxyMessage): void {\n    switch (msg.type) {\n      case ProxyMessageKind.GetPrincipal:\n        this._agent.getPrincipal().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.GetPrincipalResponse,\n            response: response.toText(),\n          });\n        });\n        break;\n      case ProxyMessageKind.Query:\n        this._agent.query(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.QueryResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.Call:\n        this._agent.call(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.CallResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.ReadState:\n        this._agent.readState(...msg.args).then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.ReadStateResponse,\n            response,\n          });\n        });\n        break;\n      case ProxyMessageKind.Status:\n        this._agent.status().then(response => {\n          this._frontend({\n            id: msg.id,\n            type: ProxyMessageKind.StatusResponse,\n            response,\n          });\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid message received: ${JSON.stringify(msg)}`);\n    }\n  }\n}\n\n// An Agent that forwards calls to a backend. The calls are serialized\nexport class ProxyAgent implements Agent {\n  private _nextId = 0;\n  private _pendingCalls = new Map<number, [(resolve: any) => void, (reject: any) => void]>();\n  public rootKey = null;\n\n  constructor(private _backend: (msg: ProxyMessage) => void) {}\n\n  public onmessage(msg: ProxyMessage): void {\n    const id = msg.id;\n\n    const maybePromise = this._pendingCalls.get(id);\n    if (!maybePromise) {\n      throw new Error('A proxy get the same message twice...');\n    }\n\n    this._pendingCalls.delete(id);\n    const [resolve, reject] = maybePromise;\n\n    switch (msg.type) {\n      case ProxyMessageKind.Error:\n        return reject(msg.error);\n      case ProxyMessageKind.GetPrincipalResponse:\n      case ProxyMessageKind.CallResponse:\n      case ProxyMessageKind.QueryResponse:\n      case ProxyMessageKind.ReadStateResponse:\n      case ProxyMessageKind.StatusResponse:\n        return resolve(msg.response);\n      default:\n        throw new Error(`Invalid message being sent to ProxyAgent: ${JSON.stringify(msg)}`);\n    }\n  }\n\n  public async getPrincipal(): Promise<Principal> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.GetPrincipal,\n    }).then(principal => {\n      if (typeof principal !== 'string') {\n        throw new Error('Invalid principal received.');\n      }\n      return Principal.fromText(principal);\n    });\n  }\n\n  public readState(\n    canisterId: Principal | string,\n    fields: ReadStateOptions,\n  ): Promise<ReadStateResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.ReadState,\n      args: [canisterId.toString(), fields],\n    }) as Promise<ReadStateResponse>;\n  }\n\n  public call(canisterId: Principal | string, fields: CallOptions): Promise<SubmitResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Call,\n      args: [canisterId.toString(), fields],\n    }) as Promise<SubmitResponse>;\n  }\n\n  public status(): Promise<JsonObject> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Status,\n    }) as Promise<JsonObject>;\n  }\n\n  public query(canisterId: Principal | string, fields: QueryFields): Promise<ApiQueryResponse> {\n    return this._sendAndWait({\n      id: this._nextId++,\n      type: ProxyMessageKind.Query,\n      args: [canisterId.toString(), fields],\n    }) as Promise<ApiQueryResponse>;\n  }\n\n  private async _sendAndWait(msg: ProxyMessage): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._pendingCalls.set(msg.id, [resolve, reject]);\n\n      this._backend(msg);\n    });\n  }\n\n  public async fetchRootKey(): Promise<ArrayBuffer> {\n    // Hex-encoded version of the replica root key\n    const rootKey = ((await this.status()) as any).root_key;\n    this.rootKey = rootKey;\n    return rootKey;\n  }\n}\n", "import { GlobalInternetComputer } from '../index';\nimport { Agent } from './api';\n\nexport * from './api';\nexport * from './http';\nexport * from './proxy';\n\ndeclare const window: GlobalInternetComputer;\ndeclare const global: GlobalInternetComputer;\ndeclare const self: GlobalInternetComputer;\n\nexport function getDefaultAgent(): Agent {\n  const agent =\n    typeof window === 'undefined'\n      ? typeof global === 'undefined'\n        ? typeof self === 'undefined'\n          ? undefined\n          : self.ic.agent\n        : global.ic.agent\n      : window.ic.agent;\n\n  if (!agent) {\n    throw new Error('No Agent could be found.');\n  }\n\n  return agent;\n}\n", "import { Principal } from '@dfinity/principal';\nimport { Agent, RequestStatusResponseStatus } from '../agent';\nimport { Certificate, CreateCertificateOptions } from '../certificate';\nimport { RequestId } from '../request_id';\nimport { toHex } from '../utils/buffer';\n\nexport * as strategy from './strategy';\nexport { defaultStrategy } from './strategy';\nexport type PollStrategy = (\n  canisterId: Principal,\n  requestId: RequestId,\n  status: RequestStatusResponseStatus,\n) => Promise<void>;\nexport type PollStrategyFactory = () => PollStrategy;\n\n/**\n * Polls the IC to check the status of the given request then\n * returns the response bytes once the request has been processed.\n * @param agent The agent to use to poll read_state.\n * @param canisterId The effective canister ID.\n * @param requestId The Request ID to poll status for.\n * @param strategy A polling strategy.\n * @param request Request for the readState call.\n */\nexport async function pollForResponse(\n  agent: Agent,\n  canisterId: Principal,\n  requestId: RequestId,\n  strategy: PollStrategy,\n  // eslint-disable-next-line\n  request?: any,\n  blsVerify?: CreateCertificateOptions['blsVerify'],\n): Promise<ArrayBuffer> {\n  const path = [new TextEncoder().encode('request_status'), requestId];\n  const currentRequest = request ?? (await agent.createReadStateRequest?.({ paths: [path] }));\n  const state = await agent.readState(canisterId, { paths: [path] }, undefined, currentRequest);\n  if (agent.rootKey == null) throw new Error('Agent root key not initialized before polling');\n  const cert = await Certificate.create({\n    certificate: state.certificate,\n    rootKey: agent.rootKey,\n    canisterId: canisterId,\n    blsVerify,\n  });\n  const maybeBuf = cert.lookup([...path, new TextEncoder().encode('status')]);\n  let status;\n  if (typeof maybeBuf === 'undefined') {\n    // Missing requestId means we need to wait\n    status = RequestStatusResponseStatus.Unknown;\n  } else {\n    status = new TextDecoder().decode(maybeBuf);\n  }\n\n  switch (status) {\n    case RequestStatusResponseStatus.Replied: {\n      return cert.lookup([...path, 'reply'])!;\n    }\n\n    case RequestStatusResponseStatus.Received:\n    case RequestStatusResponseStatus.Unknown:\n    case RequestStatusResponseStatus.Processing:\n      // Execute the polling strategy, then retry.\n      await strategy(canisterId, requestId, status);\n      return pollForResponse(agent, canisterId, requestId, strategy, currentRequest);\n\n    case RequestStatusResponseStatus.Rejected: {\n      const rejectCode = new Uint8Array(cert.lookup([...path, 'reject_code'])!)[0];\n      const rejectMessage = new TextDecoder().decode(cert.lookup([...path, 'reject_message'])!);\n      throw new Error(\n        `Call was rejected:\\n` +\n          `  Request ID: ${toHex(requestId)}\\n` +\n          `  Reject code: ${rejectCode}\\n` +\n          `  Reject text: ${rejectMessage}\\n`,\n      );\n    }\n\n    case RequestStatusResponseStatus.Done:\n      // This is _technically_ not an error, but we still didn't see the `Replied` status so\n      // we don't know the result and cannot decode it.\n      throw new Error(\n        `Call was marked as done but we never saw the reply:\\n` +\n          `  Request ID: ${toHex(requestId)}\\n`,\n      );\n  }\n  throw new Error('unreachable');\n}\n", "import { Principal } from '@dfinity/principal';\nimport { RequestStatusResponseStatus } from '../agent';\nimport { toHex } from '../utils/buffer';\nimport { PollStrategy } from './index';\nimport { RequestId } from '../request_id';\n\nexport type Predicate<T> = (\n  canisterId: Principal,\n  requestId: RequestId,\n  status: RequestStatusResponseStatus,\n) => Promise<T>;\n\nconst FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n\n/**\n * A best practices polling strategy: wait 2 seconds before the first poll, then 1 second\n * with an exponential backoff factor of 1.2. Timeout after 5 minutes.\n */\nexport function defaultStrategy(): PollStrategy {\n  return chain(conditionalDelay(once(), 1000), backoff(1000, 1.2), timeout(FIVE_MINUTES_IN_MSEC));\n}\n\n/**\n * Predicate that returns true once.\n */\nexport function once(): Predicate<boolean> {\n  let first = true;\n  return async () => {\n    if (first) {\n      first = false;\n      return true;\n    }\n    return false;\n  };\n}\n\n/**\n * Delay the polling once.\n * @param condition A predicate that indicates when to delay.\n * @param timeInMsec The amount of time to delay.\n */\nexport function conditionalDelay(condition: Predicate<boolean>, timeInMsec: number): PollStrategy {\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (await condition(canisterId, requestId, status)) {\n      return new Promise(resolve => setTimeout(resolve, timeInMsec));\n    }\n  };\n}\n\n/**\n * Error out after a maximum number of polling has been done.\n * @param count The maximum attempts to poll.\n */\nexport function maxAttempts(count: number): PollStrategy {\n  let attempts = count;\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (--attempts <= 0) {\n      throw new Error(\n        `Failed to retrieve a reply for request after ${count} attempts:\\n` +\n          `  Request ID: ${toHex(requestId)}\\n` +\n          `  Request status: ${status}\\n`,\n      );\n    }\n  };\n}\n\n/**\n * Throttle polling.\n * @param throttleInMsec Amount in millisecond to wait between each polling.\n */\nexport function throttle(throttleInMsec: number): PollStrategy {\n  return () => new Promise(resolve => setTimeout(resolve, throttleInMsec));\n}\n\n/**\n * Reject a call after a certain amount of time.\n * @param timeInMsec Time in milliseconds before the polling should be rejected.\n */\nexport function timeout(timeInMsec: number): PollStrategy {\n  const end = Date.now() + timeInMsec;\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    if (Date.now() > end) {\n      throw new Error(\n        `Request timed out after ${timeInMsec} msec:\\n` +\n          `  Request ID: ${toHex(requestId)}\\n` +\n          `  Request status: ${status}\\n`,\n      );\n    }\n  };\n}\n\n/**\n * A strategy that throttle, but using an exponential backoff strategy.\n * @param startingThrottleInMsec The throttle in milliseconds to start with.\n * @param backoffFactor The factor to multiple the throttle time between every poll. For\n *   example if using 2, the throttle will double between every run.\n */\nexport function backoff(startingThrottleInMsec: number, backoffFactor: number): PollStrategy {\n  let currentThrottling = startingThrottleInMsec;\n\n  return () =>\n    new Promise(resolve =>\n      setTimeout(() => {\n        currentThrottling *= backoffFactor;\n        resolve();\n      }, currentThrottling),\n    );\n}\n\n/**\n * Chain multiple polling strategy. This _chains_ the strategies, so if you pass in,\n * say, two throttling strategy of 1 second, it will result in a throttle of 2 seconds.\n * @param strategies A strategy list to chain.\n */\nexport function chain(...strategies: PollStrategy[]): PollStrategy {\n  return async (\n    canisterId: Principal,\n    requestId: RequestId,\n    status: RequestStatusResponseStatus,\n  ) => {\n    for (const a of strategies) {\n      await a(canisterId, requestId, status);\n    }\n  };\n}\n", "/**\n * This file is generated from the candid for asset management.\n */\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport default ({ IDL }) => {\n  const canister_id = IDL.Principal;\n  const definite_canister_settings = IDL.Record({\n    controllers: IDL.Vec(IDL.Principal),\n    freezing_threshold: IDL.Nat,\n    memory_allocation: IDL.Nat,\n    compute_allocation: IDL.Nat,\n  });\n  const canister_settings = IDL.Record({\n    controllers: IDL.Opt(IDL.Vec(IDL.Principal)),\n    freezing_threshold: IDL.Opt(IDL.Nat),\n    memory_allocation: IDL.Opt(IDL.Nat),\n    compute_allocation: IDL.Opt(IDL.Nat),\n  });\n  const wasm_module = IDL.Vec(IDL.Nat8);\n  return IDL.Service({\n    canister_status: IDL.Func(\n      [IDL.Record({ canister_id: canister_id })],\n      [\n        IDL.Record({\n          status: IDL.Variant({\n            stopped: IDL.Null,\n            stopping: IDL.Null,\n            running: IDL.Null,\n          }),\n          memory_size: IDL.Nat,\n          cycles: IDL.Nat,\n          settings: definite_canister_settings,\n          module_hash: IDL.Opt(IDL.Vec(IDL.Nat8)),\n        }),\n      ],\n      [],\n    ),\n    create_canister: IDL.Func(\n      [IDL.Record({ settings: IDL.Opt(canister_settings) })],\n      [IDL.Record({ canister_id: canister_id })],\n      [],\n    ),\n    delete_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),\n    deposit_cycles: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),\n    install_code: IDL.Func(\n      [\n        IDL.Record({\n          arg: IDL.Vec(IDL.Nat8),\n          wasm_module: wasm_module,\n          mode: IDL.Variant({\n            reinstall: IDL.Null,\n            upgrade: IDL.Null,\n            install: IDL.Null,\n          }),\n          canister_id: canister_id,\n        }),\n      ],\n      [],\n      [],\n    ),\n    provisional_create_canister_with_cycles: IDL.Func(\n      [\n        IDL.Record({\n          settings: IDL.Opt(canister_settings),\n          amount: IDL.Opt(IDL.Nat),\n        }),\n      ],\n      [IDL.Record({ canister_id: canister_id })],\n      [],\n    ),\n    provisional_top_up_canister: IDL.Func(\n      [IDL.Record({ canister_id: canister_id, amount: IDL.Nat })],\n      [],\n      [],\n    ),\n    raw_rand: IDL.Func([], [IDL.Vec(IDL.Nat8)], []),\n    start_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),\n    stop_canister: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),\n    uninstall_code: IDL.Func([IDL.Record({ canister_id: canister_id })], [], []),\n    update_settings: IDL.Func(\n      [\n        IDL.Record({\n          canister_id: IDL.Principal,\n          settings: canister_settings,\n        }),\n      ],\n      [],\n      [],\n    ),\n  });\n};\n", "/**\n * This file is generated from the candid for asset management.\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport default ({ IDL }) => {\n  return IDL.Service({\n    retrieve: IDL.Func([IDL.Text], [IDL.Vec(IDL.Nat8)], ['query']),\n    store: IDL.Func([IDL.Text, IDL.Vec(IDL.Nat8)], [], []),\n  });\n};\n", "import { Actor, ActorConfig, ActorSubclass, CallConfig } from '../actor';\nimport assetCanister from './asset_idl';\n\nexport interface AssetCanisterRecord {\n  store(path: string, content: number[]): Promise<void>;\n  retrieve(path: string): Promise<number[]>;\n}\n\n/**\n * Create a management canister actor.\n * @param config\n */\nexport function createAssetCanisterActor(config: ActorConfig) {\n  return Actor.createActor<AssetCanisterRecord>(assetCanister, config);\n}\n", "import { Principal } from '@dfinity/principal';\nimport * as CanisterStatus from './canisterStatus/index';\nimport { IDL } from '@dfinity/candid';\nimport { HttpAgent } from './agent/http';\nimport { Actor, ActorSubclass } from './actor';\n\n/**\n * Retrieves the Candid interface for the specified canister.\n *\n * @param agent The agent to use for the request (usually an `HttpAgent`)\n * @param canisterId A string corresponding to the canister ID\n * @returns Candid source code\n */\nexport async function fetchCandid(canisterId: string, agent?: HttpAgent): Promise<string> {\n  if (!agent) {\n    // Create an anonymous `HttpAgent` (adapted from Candid UI)\n    agent = new HttpAgent();\n    if (agent.isLocal()) {\n      agent.fetchRootKey();\n    }\n  }\n\n  // Attempt to use canister metadata\n  const status = await CanisterStatus.request({\n    agent,\n    canisterId: Principal.fromText(canisterId),\n    paths: ['candid'],\n  });\n  const candid = status.get('candid') as string | undefined;\n  if (candid) {\n    return candid;\n  }\n\n  // Use `__get_candid_interface_tmp_hack` for canisters without Candid metadata\n  const tmpHackInterface: IDL.InterfaceFactory = ({ IDL }) =>\n    IDL.Service({\n      __get_candid_interface_tmp_hack: IDL.Func([], [IDL.Text], ['query']),\n    });\n  const actor: ActorSubclass = Actor.createActor(tmpHackInterface, { agent, canisterId });\n  return (await actor.__get_candid_interface_tmp_hack()) as string;\n}\n"],
  "mappings": "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",
  "names": ["import_buffer", "ReplicaRejectCode", "request", "SubmitRequestType", "request", "value", "value", "__classPrivateFieldSet", "__classPrivateFieldGet", "RequestStatusResponseStatus", "__classPrivateFieldGet", "domainSeparator", "hash", "__classPrivateFieldSet", "request", "subnetStatus", "ProxyMessageKind", "request", "blsVerify", "_a", "_a", "CanisterInstallMode", "blsVerify", "_b"]
}
